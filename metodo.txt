-- Repositorio de Github: https://github.com/mmc18/Trabajo2-PLSQL-1C.git

drop table clientes cascade constraints;
drop table abonos   cascade constraints;
drop table eventos  cascade constraints;
drop table reservas	cascade constraints;

drop sequence seq_abonos;
drop sequence seq_eventos;
drop sequence seq_reservas;


-- Creación de tablas y secuencias

create table clientes(
	NIF	varchar(9) primary key,
	nombre	varchar(20) not null,
	ape1	varchar(20) not null,
	ape2	varchar(20) not null
);


create sequence seq_abonos;

create table abonos(
	id_abono	integer primary key,
	cliente  	varchar(9) references clientes,
	saldo	    integer not null check (saldo>=0)
    );

create sequence seq_eventos;

create table eventos(
	id_evento	integer  primary key,
	nombre_evento		varchar(20),
    fecha       date not null,
	asientos_disponibles	integer  not null
);

create sequence seq_reservas;

create table reservas(
	id_reserva	integer primary key,
	cliente  	varchar(9) references clientes,
    evento      integer references eventos,
	abono       integer references abonos,
	fecha	date not null
);


	
-- Procedimiento a implementar para realizar la reserva
create or replace procedure reservar_evento( arg_NIF_cliente varchar,
 arg_nombre_evento varchar, arg_fecha date) is
 
 --Declaración de excepciones
 EVENTO_FINALIZADO      exception;      -- Es lanzada si el evento tiene una fecha menor a la actual.
 PRAGMA EXCEPTION_INIT(EVENTO_FINALIZADO, -20001);
 
 EVENTO_INEXISTENTE    exception;       -- Es lanzada si el evento no existe.
 PRAGMA EXCEPTION_INIT(EVENTO_INEXISTENTE, -20003);
 
 CLIENTE_INEXISTENTE    exception;      -- Es lanzada si el cliente no existe.
 PRAGMA EXCEPTION_INIT(CLIENTE_INEXISTENTE, -20002);
 
 SIN_SALDO   exception;     --Es lanzada si el cliente seleccionado no tiene saldo.
 PRAGMA EXCEPTION_INIT(SIN_SALDO, -20004);
 
 fecha_evento date;
 NIF_cliente varchar(9);
 saldo_abono_cliente integer;
 abono_cliente integer;
 idEvento integer;
 flag integer:= 0;
 
begin 
 
 begin
  -- Lanza una excepción not data found. Para poder recoger y distinguir entre EVENTO_INEXISTENTE y CLIENTE_INEXISTENTE
  -- en este select flag=0.
  SELECT fecha into fecha_evento
  FROM eventos
  WHERE nombre_evento = arg_nombre_evento;
  
  -- Flag cambia de valor a 1 para CLIENTE_INEXISTENTE.
  flag:=1;
  
  -- Comprueba que exista el cliente.
  SELECT NIF into NIF_cliente
  FROM clientes
  WHERE NIF = arg_NIF_cliente;  
    
  -- Comprueba el saldo del cliente.
  SELECT saldo into saldo_abono_cliente
  FROM abonos
  WHERE cliente = NIF_cliente; 
  
  /*Excepcion 1*/
  if fecha_evento > arg_fecha then 
    raise EVENTO_FINALIZADO;
    end if;
  
  /*Excepcion 4*/
  if saldo_abono_cliente <= 0 then 
    raise SIN_SALDO;
    end if; 
  
  -- Comprueba el abono del cliente.
  SELECT id_abono into abono_cliente
  FROM abonos
  WHERE cliente = NIF_cliente; 
  
  -- Comprueban el id del evento correspondiente al nombre.
  SELECT id_evento into idEvento
  FROM eventos
  WHERE nombre_evento = arg_nombre_evento;
  
  -- Se descuenta una unidad del saldo del abono del cliente.
  UPDATE abonos SET saldo=saldo-1
  WHERE cliente = NIF_cliente;
  
  -- Se descuenta una unidad del número de plazas disponibles del evento.
  UPDATE eventos SET asientos_disponibles=asientos_disponibles-1
  WHERE nombre_evento = arg_nombre_evento;
  
  -- Se añade una reserva a la tabla de reservas.
  INSERT INTO reservas VALUES(seq_reservas.nextval, NIF_cliente, idEvento, abono_cliente, fecha_evento);
  
  commit;
  
  -- Captura de las excepciones lanzadas.
  exception
  when EVENTO_FINALIZADO then
    rollback;
    raise_application_error(-20001,'No se pueden reservar eventos pasados.');
    
  when NO_DATA_FOUND then
    if flag = 0 then
        rollback;
        raise_application_error(-20003,'El evento '||arg_nombre_evento||' no existe.');
    else
        rollback;
        raise_application_error(-20002,'Cliente inexistente.');
    end if;
        
  when SIN_SALDO then
    rollback;
    raise_application_error(-20004,'Saldo en abono insuficiente.');
    
  when others then 
    rollback;
    raise;
  end;
  
end;
/


------ Deja aquí tus respuestas a las preguntas del enunciado:
-- * P4.1
-- Sigue siendo fiable puesto que todas las acciones del paso 3 se han llevado a cabo,ya que no
-- ha saltado ninguna excepción en el paso 2. De haber saltado una excepción, habría sido atrapada
-- en el bloque "exception".
-- * P4.2
-- Esto ocurriría en caso de que otro proceso realizase una reserva entre la comprobación del paso 2 y
-- la ejecución del paso 3 que redujese el saldo o las plazas del evento.
-- * P4.3
-- Se usa una estrategia de programación defensiva, la cual previene errores realizando comprobaciones
-- de forma previa a cualquier acción.
-- * P4.4
-- Se hacen las comprobaciones utilizando sentencias if para verificar la existencia del evento, del 
-- cliente y el saldo suficiente en el abono antes de realizar la reserva.
-- * P4.5
-- Se podría realizar mediante la estrategia que delega las comprobaciones en el tratamiento de excepciones
-- en vez de usar una estrategia basada en la programación defensiva.


create or replace
procedure reset_seq( p_seq_name varchar )
is
    l_val number;
begin
    execute immediate
    'select ' || p_seq_name || '.nextval from dual' INTO l_val;

    execute immediate
    'alter sequence ' || p_seq_name || ' increment by -' || l_val || 
                                                          ' minvalue 0';
    execute immediate
    'select ' || p_seq_name || '.nextval from dual' INTO l_val;

    execute immediate
    'alter sequence ' || p_seq_name || ' increment by 1 minvalue 0';

end;
/


create or replace procedure inicializa_test is
begin
  reset_seq( 'seq_abonos' );
  reset_seq( 'seq_eventos' );
  reset_seq( 'seq_reservas' );
        
  
    delete from reservas;
    delete from eventos;
    delete from abonos;
    delete from clientes;
    
       
		
    insert into clientes values ('12345678A', 'Pepe', 'Perez', 'Porras');
    insert into clientes values ('11111111B', 'Beatriz', 'Barbosa', 'Bernardez');
    
    insert into abonos values (seq_abonos.nextval, '12345678A',10);
    insert into abonos values (seq_abonos.nextval, '11111111B',0);
    
    insert into eventos values ( seq_eventos.nextval, 'concierto_la_moda', date '2024-6-27', 200);
    insert into eventos values ( seq_eventos.nextval, 'teatro_impro', date '2024-7-1', 50);

    commit;
end;
/

exec inicializa_test;

-- Completa el test

create or replace procedure test_reserva_evento is
begin
	 
  --caso 1 Reserva correcta, se realiza
  -- Imprime por pantalla Detecta OK reserva: si se ha hecho
  -- la reserva correctamente sino imprime Mal no detecta reserva
  begin
    inicializa_test;
    reservar_evento('12345678A','teatro_impro',to_date('2024-07-01','YYYY-MM-DD'));
    dbms_output.put_line('Detecta OK reserva: '||sqlerrm);
  exception
    when others then
      dbms_output.put_line('Mal no detecta reserva: '||sqlerrm);
  end;
  
  
  --caso 2 Evento pasado
  -- Imprime por pantalla Detecta OK EVENTO_FINALIZADO: si el evento que se intenta
  -- reservar ya ha acabado sino imprime Mal no detecta EVENTO_FINALIZADO
  begin
    inicializa_test;
    reservar_evento('12345678A','teatro_impro',to_date('2023-08-01','YYYY-MM-DD'));
    dbms_output.put_line('Mal no detecta EVENTO_FINALIZADO');
  exception
    when others then
      if sqlcode = -20001 then
        dbms_output.put_line('Detecta OK EVENTO_FINALIZADO: '||sqlerrm);
      else
        dbms_output.put_line('Mal no detecta EVENTO_FINALIZADO: '||sqlerrm);
      end if;
  end;
  
  --caso 3 Evento inexistente
  -- Imprime por pantalla Detecta OK EVENTO_INEXISTENTE: si el evento que se intenta
  -- reservar no existe sino imprime Mal no detecta EVENTO_INEXISTENTE:
  begin
    inicializa_test;
    reservar_evento('12345678A','el_rey_leon',to_date('2024-07-01','YYYY-MM-DD'));
    dbms_output.put_line('Mal no detecta EVENTO_INEXISTENTE');
  exception
    when others then
      if sqlcode = -20003 then
        dbms_output.put_line('Detecta OK EVENTO_INEXISTENTE: '||sqlerrm);
      else
        dbms_output.put_line('Mal no detecta EVENTO_INEXISTENTE: '||sqlerrm);
      end if;
  end;
  

  --caso 4 Cliente inexistente  
  -- Imprime por pantalla Detecta OK CLIENTE_INEXISTENTE: si el usuario que quiere reservar
  -- no existe sino imprime Mal no detecta CLIENTE_INEXISTENTE
  begin
    inicializa_test;
    reservar_evento('12345678B','teatro_impro',to_date('2024-07-01','YYYY-MM-DD'));
    dbms_output.put_line('Mal no detecta CLIENTE_INEXISTENTE');
  exception
    when others then
      if sqlcode = -20002 then
        dbms_output.put_line('Detecta OK CLIENTE_INEXISTENTE: '||sqlerrm);
      else
        dbms_output.put_line('Mal no detecta CLIENTE_INEXISTENTE: '||sqlerrm);
      end if;
  end;
  
  --caso 5 El cliente no tiene saldo suficiente
  -- Imprime por pantalla Detecta OK SIN_SALDO: si no se tiene suficiente saldo sino imprime 
  -- Mal no detecta SIN_SALDO
  begin
    inicializa_test;
    reservar_evento('11111111B','teatro_impro',to_date('2024-07-01','YYYY-MM-DD'));
    dbms_output.put_line('Mal no detecta SIN_SALDO');
  exception
    when others then
      if sqlcode = -20004 then
        dbms_output.put_line('Detecta OK SIN_SALDO: '||sqlerrm);
      else
        dbms_output.put_line('Mal no detecta SIN_SALDO: '||sqlerrm);
      end if;
  end;

  
end;
/


set serveroutput on;
exec test_reserva_evento;